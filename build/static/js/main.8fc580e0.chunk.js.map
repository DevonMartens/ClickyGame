{"version":3,"sources":["components/Nav.js","components/Header.js","components/Buttons.js","components/Card.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","id","Header","Buttons","onClick","difficulty","name","src","characterImage","alt","Card","clicked","key","characterName","Footer","App","state","levels","characters","wasClicked","idArr","totalClicks","highScore","restartGame","setState","console","log","document","querySelector","textContent","Simple","Normal","Challenge","shuffle","currentIndex","length","shuffleCharacters","randomIndex","Math","floor","random","temporaryValue","map","checkArr","push","this","level","character","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fc580e0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav(props) {\n  return (\n\n    <nav className=\"nav\">\n      <div className=\"game-name\">\n        Clicky Game\n        </div>\n      <div className=\"directions\">\n        Start \n          <span className=\"subDirections\"> Click An Image to Start the game</span>\n      </div>\n      <div className=\"game-info-container game-info\">\n        Score <span id=\"score\">0</span> &nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;&nbsp;&nbsp;&nbsp;\n                Top Score <span id=\"top-score\">0</span>\n      </div>\n    </nav>\n\n  );\n}\n\nexport default Nav;","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"page-title\">Simspons Fan Game</h1>\n      <h3 className=\"page-subTitle\">Only click each character once! Get them all and Win!</h3>\n    <br/>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Buttons(props) {\n    return (\n        <div className=\"levels\" onClick={() => props.difficulty(props.name)}>\n            <img className=\"character\" src={\"assets/images/\" + props.characterImage} alt=\"character\" />\n            <div className=\"btnGroup\">\n                <div id=\"btnInd\">\n                    <h4 className=\"btnName\">{props.name}<br/></h4>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Buttons;\n","import React from \"react\";\nimport \"../App.css\"\n\nfunction Card(props) {\n\n  return (\n      <div className=\"card visible\" onClick={() => props.clicked(props.id)}>\n       \n          <div className=\"overlay\"></div>\n          \n          <img className=\"character\" src={\"assets/images/\" + props.characterImage} alt=\"character\" />\n          <div id=\"character-name\" key={props.id}>{props.characterName}</div>\n    \n      </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\n\nfunction Footer() {\n  return (\n\n    <footer>\n        <img className=\"SimpsonsLogo\" src=\"assets/images/simpsonlogo.png\" alt=\"logo\" /> \n        <span id=\"footer-right\">A Simpsons Memory Game DOH!</span> \n    </footer>\n  );\n}\n\nexport default Footer;","\nimport React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Buttons from \"./components/Buttons\"\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\n\nimport levels from \"./Levels.json\"\nimport Simple from \"./character.json\";\nimport Normal from \"./Character2.json\";\nimport Challenge from \"./challenge.json\";\n// import secondList from \"./Character.json\";\n\n\nclass App extends Component {\n  state = {\n    levels,\n    characters: [],\n    wasClicked: false,\n    idArr: [],\n    totalClicks: 1,\n    highScore: 1\n  }\n\n  restartGame = () => {\n    this.setState({\n      idArr: [],\n      totalClicks: 1,\n    })\n    console.log(this.state.idArr)\n    document.querySelector(\"#score\").textContent = 0\n  }\n\n  difficulty = (name) => {\n    console.log(name)\n    if (name === \"Simple\") {\n      this.setState({\n        characters: Simple\n      })\n      document.querySelector(\".directions\").textContent = `You are now in Nice and Easy Mode...12 Characters Loaded!`\n    } else if (name === \"Normal\") {\n      this.setState({\n        characters: Normal\n      }) \n      document.querySelector(\".directions\").textContent = `You are now in Normal Mode...18 Characters Loaded!`\n    } else {\n      this.setState({\n        characters: Challenge\n      }) \n      document.querySelector(\".directions\").textContent = `You are now in Challenge Mode...32 Characters Loaded!`\n      }\n  }\n\n  shuffle = (characters) => {\n    let currentIndex = characters.length;\n\n    let shuffleCharacters = characters;\n    while (currentIndex !== 0) {\n      //Get a random index\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      //Swap the values\n      let temporaryValue = shuffleCharacters[currentIndex];\n      shuffleCharacters[currentIndex] = shuffleCharacters[randomIndex];\n      shuffleCharacters[randomIndex] = temporaryValue;\n    }\n    this.setState({ characters: shuffleCharacters })\n  }\n\n  clicked = (id) => {\n    console.log(\"1\", this.state.totalClicks, this.state.highScore)\n    //adding up the total number of clicks\n    if (this.state.totalClicks >= this.state.highScore) {\n      this.setState({\n        highScore: this.state.totalClicks + 1\n      })\n      document.querySelector(\"#top-score\").textContent = this.state.highScore\n    }\n    this.setState({ totalClicks: this.state.totalClicks + 1 });\n    document.querySelector(\"#score\").textContent = this.state.totalClicks\n    document.querySelector(\".directions\").textContent = `Good guess! But don't click me again!`\n    console.log(\"2\", this.state.totalClicks, this.state.highScore)\n    if (this.state.totalClicks === this.state.characters.length) {\n      document.querySelector(\".directions\").textContent = `Congratulations! You won!`\n      this.restartGame()\n    }\n    //shuffle the cards\n    this.state.idArr.map(checkArr => {\n      if (checkArr === id) {\n        document.querySelector(\".directions\").textContent = `Oh no! You clicked me already! Click to try again!`\n        if (this.state.totalClicks >= (this.state.highScore)) {\n          document.querySelector(\"#top-score\").textContent = this.state.highScore - 1\n          this.setState({\n            highScore: this.state.highScore - 1\n          })\n        }\n        console.log(\"3\", this.state.totalClicks, this.state.highScore)\n        this.restartGame()\n      }\n      const characters = this.state.characters;\n\n      return characters\n    })\n    this.shuffle(this.state.characters);\n    console.log(\"4\", this.state.totalClicks, this.state.highScore)\n    this.state.idArr.push(id)\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Header />\n        <div className=\"levels\">\n        {this.state.levels.map(level => {\n          return (\n            <Buttons\n              id={level.id}\n              name={level.name}\n              characterImage={level.characterImage}\n              difficulty={this.difficulty}\n            />\n          )\n        })}\n        </div>\n        <div className=\"game-container\">\n          {this.state.characters.map(character => {\n            return (\n              <Card\n                id={character.id}\n                key={character.id}\n                characterName={character.characterName}\n                characterImage={character.characterImage}\n                clicked={this.clicked}\n              />\n            )\n          })}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}