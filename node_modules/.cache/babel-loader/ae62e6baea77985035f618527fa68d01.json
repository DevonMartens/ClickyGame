{"ast":null,"code":"var _jsxFileName = \"/Users/devonmartens/GitHub/ClickyGame/src/App.js\";\nimport React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Buttons from \"./components/Buttons\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport levels from \"./Levels.json\";\nimport Simple from \"./character.json\";\nimport Normal from \"./Character2.json\";\nimport Challenge from \"./challenge.json\"; // import secondList from \"./Character.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levels,\n      characters: [],\n      wasClicked: false,\n      idArr: [],\n      totalClicks: 1,\n      highScore: 1\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        idArr: [],\n        totalClicks: 1\n      });\n      console.log(this.state.idArr);\n      document.querySelector(\"#score\").textContent = 0;\n    };\n\n    this.difficulty = name => {\n      console.log(name);\n\n      if (name === \"Simpleton\") {\n        this.setState({\n          characters: Simple\n        });\n        document.querySelector(\".directions\").textContent = `You are now in Nice and Easy Mode...12 Characters Loaded!`;\n      } else if (name === \"Not Neanderthal\") {\n        this.setState({\n          characters: Normal\n        });\n        document.querySelector(\".directions\").textContent = `You are now in Normal Mode...18 Characters Loaded!`;\n      } else {\n        this.setState({\n          characters: Challenge\n        });\n        document.querySelector(\".directions\").textContent = `You are now in Challenge Mode...32 Characters Loaded!`;\n      }\n    };\n\n    this.shuffle = characters => {\n      let currentIndex = characters.length;\n      let shuffleCharacters = characters;\n\n      while (currentIndex !== 0) {\n        //Get a random index\n        let randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; //Swap the values\n\n        let temporaryValue = shuffleCharacters[currentIndex];\n        shuffleCharacters[currentIndex] = shuffleCharacters[randomIndex];\n        shuffleCharacters[randomIndex] = temporaryValue;\n      }\n\n      this.setState({\n        characters: shuffleCharacters\n      });\n    };\n\n    this.clicked = id => {\n      console.log(\"1\", this.state.totalClicks, this.state.highScore); //adding up the total number of clicks\n\n      if (this.state.totalClicks >= this.state.highScore) {\n        this.setState({\n          highScore: this.state.totalClicks + 1\n        });\n        document.querySelector(\"#top-score\").textContent = this.state.highScore;\n      }\n\n      this.setState({\n        totalClicks: this.state.totalClicks + 1\n      });\n      document.querySelector(\"#score\").textContent = this.state.totalClicks;\n      document.querySelector(\".directions\").textContent = `Good guess! But don't click me again!`;\n      console.log(\"2\", this.state.totalClicks, this.state.highScore);\n\n      if (this.state.totalClicks === this.state.characters.length) {\n        document.querySelector(\".directions\").textContent = `Congratulations! You won!`;\n        this.restartGame();\n      } //shuffle the cards\n\n\n      this.state.idArr.map(checkArr => {\n        if (checkArr === id) {\n          document.querySelector(\".directions\").textContent = `Oh no! You clicked me already! Click to try again!`;\n\n          if (this.state.totalClicks >= this.state.highScore) {\n            document.querySelector(\"#top-score\").textContent = this.state.highScore - 1;\n            this.setState({\n              highScore: this.state.highScore - 1\n            });\n          }\n\n          console.log(\"3\", this.state.totalClicks, this.state.highScore);\n          this.restartGame();\n        }\n\n        const characters = this.state.characters;\n        return characters;\n      });\n      this.shuffle(this.state.characters);\n      console.log(\"4\", this.state.totalClicks, this.state.highScore);\n      this.state.idArr.push(id);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"levels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.levels.map(level => {\n      return React.createElement(Buttons, {\n        id: level.id,\n        name: level.name,\n        characterImage: level.characterImage,\n        difficulty: this.difficulty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.state.characters.map(character => {\n      return React.createElement(Card, {\n        id: character.id,\n        key: character.id,\n        characterName: character.characterName,\n        characterImage: character.characterImage,\n        clicked: this.clicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    })), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/devonmartens/GitHub/ClickyGame/src/App.js"],"names":["React","Component","Nav","Header","Buttons","Card","Footer","levels","Simple","Normal","Challenge","App","state","characters","wasClicked","idArr","totalClicks","highScore","restartGame","setState","console","log","document","querySelector","textContent","difficulty","name","shuffle","currentIndex","length","shuffleCharacters","randomIndex","Math","floor","random","temporaryValue","clicked","id","map","checkArr","push","render","level","characterImage","character","characterName"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Buttons from \"./components/Buttons\"\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\n\nimport levels from \"./Levels.json\"\nimport Simple from \"./character.json\";\nimport Normal from \"./Character2.json\";\nimport Challenge from \"./challenge.json\";\n// import secondList from \"./Character.json\";\n\n\nclass App extends Component {\n  state = {\n    levels,\n    characters: [],\n    wasClicked: false,\n    idArr: [],\n    totalClicks: 1,\n    highScore: 1\n  }\n\n  restartGame = () => {\n    this.setState({\n      idArr: [],\n      totalClicks: 1,\n    })\n    console.log(this.state.idArr)\n    document.querySelector(\"#score\").textContent = 0\n  }\n\n  difficulty = (name) => {\n    console.log(name)\n    if (name === \"Simpleton\") {\n      this.setState({\n        characters: Simple\n      })\n      document.querySelector(\".directions\").textContent = `You are now in Nice and Easy Mode...12 Characters Loaded!`\n    } else if (name === \"Not Neanderthal\") {\n      this.setState({\n        characters: Normal\n      }) \n      document.querySelector(\".directions\").textContent = `You are now in Normal Mode...18 Characters Loaded!`\n    } else {\n      this.setState({\n        characters: Challenge\n      }) \n      document.querySelector(\".directions\").textContent = `You are now in Challenge Mode...32 Characters Loaded!`\n      }\n  }\n\n  shuffle = (characters) => {\n    let currentIndex = characters.length;\n\n    let shuffleCharacters = characters;\n    while (currentIndex !== 0) {\n      //Get a random index\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      //Swap the values\n      let temporaryValue = shuffleCharacters[currentIndex];\n      shuffleCharacters[currentIndex] = shuffleCharacters[randomIndex];\n      shuffleCharacters[randomIndex] = temporaryValue;\n    }\n    this.setState({ characters: shuffleCharacters })\n  }\n\n  clicked = (id) => {\n    console.log(\"1\", this.state.totalClicks, this.state.highScore)\n    //adding up the total number of clicks\n    if (this.state.totalClicks >= this.state.highScore) {\n      this.setState({\n        highScore: this.state.totalClicks + 1\n      })\n      document.querySelector(\"#top-score\").textContent = this.state.highScore\n    }\n    this.setState({ totalClicks: this.state.totalClicks + 1 });\n    document.querySelector(\"#score\").textContent = this.state.totalClicks\n    document.querySelector(\".directions\").textContent = `Good guess! But don't click me again!`\n    console.log(\"2\", this.state.totalClicks, this.state.highScore)\n    if (this.state.totalClicks === this.state.characters.length) {\n      document.querySelector(\".directions\").textContent = `Congratulations! You won!`\n      this.restartGame()\n    }\n    //shuffle the cards\n    this.state.idArr.map(checkArr => {\n      if (checkArr === id) {\n        document.querySelector(\".directions\").textContent = `Oh no! You clicked me already! Click to try again!`\n        if (this.state.totalClicks >= (this.state.highScore)) {\n          document.querySelector(\"#top-score\").textContent = this.state.highScore - 1\n          this.setState({\n            highScore: this.state.highScore - 1\n          })\n        }\n        console.log(\"3\", this.state.totalClicks, this.state.highScore)\n        this.restartGame()\n      }\n      const characters = this.state.characters;\n\n      return characters\n    })\n    this.shuffle(this.state.characters);\n    console.log(\"4\", this.state.totalClicks, this.state.highScore)\n    this.state.idArr.push(id)\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Header />\n        <div className=\"levels\">\n        {this.state.levels.map(level => {\n          return (\n            <Buttons\n              id={level.id}\n              name={level.name}\n              characterImage={level.characterImage}\n              difficulty={this.difficulty}\n            />\n          )\n        })}\n        </div>\n        <div className=\"game-container\">\n          {this.state.characters.map(character => {\n            return (\n              <Card\n                id={character.id}\n                key={character.id}\n                characterName={character.characterName}\n                characterImage={character.characterImage}\n                clicked={this.clicked}\n              />\n            )\n          })}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}